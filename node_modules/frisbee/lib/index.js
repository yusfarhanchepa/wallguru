"use strict";

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var caseless = require('caseless');

var qs = require('qs');

var fetchPonyfill = require('fetch-ponyfill');

var urlJoin = require('url-join');

var Interceptor = require('./interceptor');

var _fetchPonyfill = fetchPonyfill({
  Promise: Promise
}),
    fetch = _fetchPonyfill.fetch;

var methods = ['get', 'head', 'post', 'put', 'del', 'options', 'patch'];
var respProperties = {
  readOnly: ['headers', 'ok', 'redirected', 'status', 'statusText', 'type', 'url', 'bodyUsed'],
  writable: ['useFinalURL'],
  callable: ['clone', 'error', 'redirect', 'arrayBuffer', 'blob', 'formData', 'json', 'text']
};

function createFrisbeeResponse(origResp) {
  var resp = {
    originalResponse: origResp
  };
  respProperties.readOnly.forEach(function (prop) {
    return Object.defineProperty(resp, prop, {
      value: origResp[prop]
    });
  });
  respProperties.writable.forEach(function (prop) {
    return Object.defineProperty(resp, prop, {
      get: function get() {
        return origResp[prop];
      },
      set: function set(value) {
        origResp[prop] = value;
      }
    });
  });
  var callable = null;
  respProperties.callable.forEach(function (prop) {
    Object.defineProperty(resp, prop, {
      value: (callable = origResp[prop], typeof callable === 'function' && callable.bind(origResp))
    });
  });
  var headersObj = {};
  origResp.headers.forEach(function (pair) {
    headersObj[pair[0]] = pair[1]; // eslint-disable-line prefer-destructuring
  });
  Object.defineProperty(resp, 'headersObj', {
    value: headersObj
  });
  return resp;
}

var Frisbee =
/*#__PURE__*/
function () {
  function Frisbee() {
    var _this = this;

    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Frisbee);

    this.opts = opts;
    Object.defineProperty(this, 'parseErr', {
      enumerable: false,
      value: opts.parseErr || new Error("Invalid JSON received".concat(opts.baseURI ? " from ".concat(opts.baseURI) : ''))
    });
    this.headers = _objectSpread({}, opts.headers);
    this.arrayFormat = opts.arrayFormat || 'indices';
    this.raw = opts.raw === true;
    if (opts.auth) this.auth(opts.auth);
    methods.forEach(function (method) {
      _this[method] = _this._setup(method);
    }); // interceptor should be initialized after methods setup

    this.interceptor = new Interceptor(this, methods);
  }

  _createClass(Frisbee, [{
    key: "_setup",
    value: function _setup(method) {
      var _this2 = this;

      return function () {
        var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        // path must be string
        if (typeof path !== 'string') throw new TypeError('`path` must be a string'); // otherwise check if its an object

        if (_typeof(options) !== 'object' || Array.isArray(options)) throw new TypeError('`options` must be an object');

        var raw = options.raw,
            noRaw = _objectWithoutProperties(options, ["raw"]);

        var opts = _objectSpread({}, noRaw, {
          headers: _objectSpread({}, _this2.headers, options.headers),
          method: method === 'del' ? 'DELETE' : method.toUpperCase()
        }); // remove any nil or blank headers
        // (e.g. to automatically set Content-Type with `FormData` boundary)


        Object.keys(opts.headers).forEach(function (key) {
          if (typeof opts.headers[key] === 'undefined' || opts.headers[key] === null || opts.headers[key] === '') delete opts.headers[key];
        });
        var c = caseless(opts.headers); // in order to support Android POST requests
        // we must allow an empty body to be sent
        // https://github.com/facebook/react-native/issues/4890

        if (typeof opts.body === 'undefined' && opts.method === 'POST') {
          opts.body = '';
        } else if (_typeof(opts.body) === 'object' || Array.isArray(opts.body)) {
          if (opts.method === 'GET' || opts.method === 'DELETE') {
            var arrayFormat = _this2.arrayFormat;
            path += "?".concat(qs.stringify(opts.body, {
              arrayFormat: arrayFormat
            }));
            delete opts.body;
          } else if (c.get('Content-Type') && c.get('Content-Type').split(';')[0] === 'application/json') {
            try {
              opts.body = JSON.stringify(opts.body);
            } catch (err) {
              throw err;
            }
          }
        }

        return new Promise(
        /*#__PURE__*/
        function () {
          var _ref = _asyncToGenerator(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee(resolve, reject) {
            var fullUri, originalRes, res, contentType;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.prev = 0;
                    fullUri = _this2.opts.baseURI ? urlJoin(_this2.opts.baseURI, path) : path;
                    _context.next = 4;
                    return fetch(fullUri, opts);

                  case 4:
                    originalRes = _context.sent;
                    res = createFrisbeeResponse(originalRes);
                    contentType = res.headers.get('Content-Type');

                    if (res.ok) {
                      _context.next = 29;
                      break;
                    }

                    res.err = new Error(res.statusText); // check if the response was JSON, and if so, better the error

                    if (!(contentType && contentType.includes('application/json'))) {
                      _context.next = 27;
                      break;
                    }

                    _context.prev = 10;

                    if (!(typeof res.json === 'function')) {
                      _context.next = 17;
                      break;
                    }

                    _context.next = 14;
                    return res.json();

                  case 14:
                    res.body = _context.sent;
                    _context.next = 21;
                    break;

                  case 17:
                    _context.next = 19;
                    return res.text();

                  case 19:
                    res.body = _context.sent;
                    res.body = JSON.parse(res.body);

                  case 21:
                    // attempt to use better and human-friendly error messages
                    if (_typeof(res.body) === 'object' && typeof res.body.message === 'string') {
                      res.err = new Error(res.body.message);
                    } else if (!Array.isArray(res.body) && // attempt to utilize Stripe-inspired error messages
                    _typeof(res.body.error) === 'object') {
                      if (res.body.error.message) res.err = new Error(res.body.error.message);
                      if (res.body.error.stack) res.err.stack = res.body.error.stack;
                      if (res.body.error.code) res.err.code = res.body.error.code;
                      if (res.body.error.param) res.err.param = res.body.error.param;
                    }

                    _context.next = 27;
                    break;

                  case 24:
                    _context.prev = 24;
                    _context.t0 = _context["catch"](10);
                    res.err = _this2.parseErr;

                  case 27:
                    resolve(res);
                    return _context.abrupt("return");

                  case 29:
                    if (!(raw === true || _this2.raw && raw !== false)) {
                      _context.next = 31;
                      break;
                    }

                    return _context.abrupt("return", resolve(res.originalResponse));

                  case 31:
                    if (!(contentType && contentType.includes('application/json'))) {
                      _context.next = 53;
                      break;
                    }

                    _context.prev = 32;

                    if (!(typeof res.json === 'function')) {
                      _context.next = 39;
                      break;
                    }

                    _context.next = 36;
                    return res.json();

                  case 36:
                    res.body = _context.sent;
                    _context.next = 43;
                    break;

                  case 39:
                    _context.next = 41;
                    return res.text();

                  case 41:
                    res.body = _context.sent;
                    res.body = JSON.parse(res.body);

                  case 43:
                    _context.next = 51;
                    break;

                  case 45:
                    _context.prev = 45;
                    _context.t1 = _context["catch"](32);

                    if (!(contentType === 'application/json')) {
                      _context.next = 51;
                      break;
                    }

                    res.err = _this2.parseErr;
                    resolve(res);
                    return _context.abrupt("return");

                  case 51:
                    _context.next = 56;
                    break;

                  case 53:
                    _context.next = 55;
                    return res.text();

                  case 55:
                    res.body = _context.sent;

                  case 56:
                    resolve(res);
                    _context.next = 62;
                    break;

                  case 59:
                    _context.prev = 59;
                    _context.t2 = _context["catch"](0);
                    reject(_context.t2);

                  case 62:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this, [[0, 59], [10, 24], [32, 45]]);
          }));

          return function (_x, _x2) {
            return _ref.apply(this, arguments);
          };
        }());
      };
    }
  }, {
    key: "auth",
    value: function auth(creds) {
      if (typeof creds === 'string') {
        var index = creds.indexOf(':');
        if (index !== -1) creds = [creds.substr(0, index), creds.substr(index + 1)];
      }

      if (!Array.isArray(creds)) {
        // eslint-disable-next-line prefer-rest-params
        creds = [].slice.call(arguments);
      }

      switch (creds.length) {
        case 0:
          creds = ['', ''];
          break;

        case 1:
          creds.push('');
          break;

        case 2:
          break;

        default:
          throw new Error('auth option can only have two keys `[user, pass]`');
      }

      if (typeof creds[0] !== 'string') throw new TypeError('auth option `user` must be a string');
      if (typeof creds[1] !== 'string') throw new TypeError('auth option `pass` must be a string');

      if (!creds[0] && !creds[1]) {
        delete this.headers.Authorization;
      } else {
        this.headers.Authorization = "Basic ".concat(Buffer.from(creds.join(':')).toString('base64'));
      }

      return this;
    }
  }, {
    key: "jwt",
    value: function jwt(token) {
      if (token === null) delete this.headers.Authorization;else if (typeof token === 'string') this.headers.Authorization = "Bearer ".concat(token);else throw new TypeError('jwt token must be a string');
      return this;
    }
  }]);

  return Frisbee;
}();

module.exports = Frisbee;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,